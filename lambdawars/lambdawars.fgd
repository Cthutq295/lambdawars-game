//=============================================================================
//
// Purpose: Lambda Wars game definition file (.fgd).
//
// AUTOGENERATED! (Use "generate_fgd")
//
//=============================================================================

@include "base.fgd"
@include "deferred.fgd"

@BaseClass = Wars
[ 
	ownernumber(choices) : "Owner Number" : 0 : "Ownernumber of this entity." =
	[
		0 : "Neutral"
		1 : "Enemy"
		2 : "Player 0"
		3 : "Player 1"
		4 : "Player 2"
		5 : "Player 3"
		6 : "Player 4"
		7 : "Player 5"
		8 : "Player 6"
		9 : "Player 7"
		10 : "Player 8"
		11 : "Player 9"
		12 : "Player 10"
		13 : "Player 11"
	]
	
	input ChangeOwner(integer) : "Change owner of this entity. 0 = Neutral, 1 = Enemy, 2 and further corresponds to Player_1, Player_2, etc."
]

@BaseClass base(Studiomodel, Targetname, Angles, RenderFields, DamageFilter, ResponseContext, Shadow, Wars) color(0 200 200) = BaseUnit
[
    health(integer) : "Health" : 0 : "Unit health (leave 0 for unit type default)"
]

@PointClass base(Angles) = env_detail_controller : "An entity that lets you control the fade distances for detail props."
[
	fademindist(float) : "Start Fade Dist/Pixels" : 400 : "Distance at which the prop starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 1200 : "Maximum distance at which the prop is visible."
]

@PointClass base(Parentname, Global, Angles, Studiomodel, BreakableProp, DXLevelChoice, BaseFadeProp, RenderFields,Wars) sphere(fademindist) sphere(fademaxdist) studioprop() = wars_flora :
	"" 
[
]

@SolidClass base(Targetname,Parentname,Origin,RenderFields,Global,Inputfilter,EnableDisable,Shadow,Wars)   = fow_blocker :
	"" 
[
]

@PointClass base(Targetname) iconsprite("editor/recast_offmesh_connection.vmt") = recast_offmesh_connection : 
	"Recast off mesh connection. Can be used to add connections manually. For example, to indicate an unit can jump down an edge."
[
    target(target_destination) : "End point" : : "Target entity end point of this entity."
	spawnflags(Flags) = 
	[
		// Type of connection
		1 : "Human" : 1
		2 : "Medium" : 1
		4 : "Large" : 1
		8 : "Very Large" : 1
		16 : "Air" : 0
		
		32 : "Jump down Edge" : 0
	]
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = recast_mgr : 
	"Contains recast navigation mesh settings. Currently only allows disabling certain meshes on maps."
[
	spawnflags(Flags) = 
	[
		// Mesh
		1 : "Disable Mesh Human" : 0
		2 : "Disable Mesh Medium" : 0
		4 : "Disable Mesh Large" : 0
		8 : "Disable Mesh Very Large" : 0
		16 : "Disable Mesh Air" : 0
	]
]

@NPCClass base(BaseUnit)   = asw_door :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "asw_door" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"asw_door" : "asw_door"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(prop_dynamic_base,Wars)   = asw_weapon_flamer :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = asw_weapon_rifle :
	"" 
[
]


@NPCClass base(BaseUnit)   = bounce_bomb :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "combine_mine" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"combine_mine" : "combine_mine"
		"overrun_combine_mine" : "overrun_combine_mine"
		"destroyhq_rebel_mine" : "destroyhq_rebel_mine"
		"char_combine_mine" : "char_combine_mine"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(prop_dynamic_base,Wars)   = bugbait :
	"" 
[
]


@NPCClass base(BaseUnit) studio("models/props_wasteland/antlionhill.mdl")   = build_ant_colony :
	"" 
[
	amount(integer): "amount" : 1 : ""
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -256.000000 96.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	frequency(float): "frequency" : "1.0" : ""
	generationtype(choices) : "Generation type" : 1 : "Speed at which new grubs a generated." =
	[
		0 : "Custom"
		1 : "Low"
		2 : "Normal"
		3 : "High"
	]
	maxgrubs(integer): "maxgrubs" : 50 : ""
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	startgrubs(integer): "startgrubs" : 10 : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_ant_colony" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_ant_colony" : "build_ant_colony"
		"mission_build_ant_colony" : "mission_build_ant_colony"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_wasteland/rockcliff05a.mdl")   = build_ant_minihive :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -180.000000 0.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_ant_minihive" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_ant_minihive" : "build_ant_minihive"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/combine_barricade_short01a.mdl")   = build_barricade :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_barricade" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_barricade" : "build_comb_barricade"
		"overrun_build_comb_barricade" : "overrun_build_comb_barricade"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/rebels/pg_rebel_barricade.mdl")   = build_barricade_rebels :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_barricade" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_barricade" : "build_comb_barricade"
		"overrun_build_comb_barricade" : "overrun_build_comb_barricade"
		"build_reb_barricade" : "build_reb_barricade"
		"build_reb_barricade_destroyhq" : "build_reb_barricade_destroyhq"
		"overrun_build_reb_barricade" : "overrun_build_reb_barricade"
		"build_char_barricade" : "build_char_barricade"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = build_base :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = build_basefactory :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 0.000000 0.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = build_baseregeneration :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props/brick_bridge.mdl")   = build_bridge :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_bridge" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_bridge" : "build_bridge"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_jammer.mdl")   = build_char_comb_regenerationpost :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_char_comb_regenerationpost" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_char_comb_regenerationpost" : "build_char_comb_regenerationpost"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_armory.mdl")   = build_comb_armory :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -210.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_armory" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_armory" : "build_comb_armory"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_bunker.mdl")   = build_comb_bunker :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	destroyable(choices): "destroyable" : 1 : "Can this building be completely destroyed?" = 
	[
		0 : "False"
		1 : "True"
	]
	enteroffset(vector): "enteroffset" : "0.000000 0.000000 0.000000" : "Offset at which units enter the building"
	entertarget(string): "entertarget" : "" : "Target entity at which units enter"
	exitoffset(vector): "exitoffset" : "0.000000 0.000000 0.000000" : "Offset at which units exit the building"
	exittarget(string): "exittarget" : "" : "Target entity at which units exit"
	healthungarrisonable(integer): "healthungarrisonable" : 0 : "Health at which this building is ungarrisonable"
	maxpopulation(integer): "maxpopulation" : 8 : "Maximum number of population in units this building can take."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnGarrisoned(integer) : ""
	output OnUnitKilled(void) : ""
	output OnUnGarrisoned(void) : ""
	playerowned(choices): "playerowned" : 0 : "Do not change the owner of the building to neutral when empty." = 
	[
		0 : "False"
		1 : "True"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "bunker_test" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"bunker_test" : "bunker_test"
		"build_comb_bunker" : "build_comb_bunker"
		"overrun_build_comb_bunker" : "overrun_build_comb_bunker"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_energy_cell.mdl")   = build_comb_energycell :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_energycell" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_energycell" : "build_comb_energycell"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_scrap_power_generator.mdl")   = build_comb_factory :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_factory" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_factory" : "build_comb_factory"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/combine/barracks.mdl")   = build_comb_garrison :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -210.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_garrison" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_garrison" : "build_comb_garrison"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/combine/canisterlauncher.mdl")   = build_comb_headcrabcanisterlauncher :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_headcrabcanisterlauncher" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_headcrabcanisterlauncher" : "build_comb_headcrabcanisterlauncher"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_hq.mdl")   = build_comb_hq :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 0.000000 0.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_hq" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_hq" : "build_comb_hq"
		"build_comb_hq_overrun" : "build_comb_hq_overrun"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_jammer.mdl")   = build_comb_jammer :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -210.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_jammer" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_jammer" : "build_comb_jammer"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/wars_structures/combine/comb_mech.mdl")   = build_comb_mech_factory :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -210.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_mech_factory" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_mech_factory" : "build_comb_mech_factory"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/combine_mortar01a.mdl")   = build_comb_mortar :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_mortar" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_mortar" : "build_comb_mortar"
	]
	input FireMorter(target_destination) : "Fire Morter to a given position"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = build_comb_powergen_scrap :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_power_generator.mdl")   = build_comb_powergenerator :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_powergenerator" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_powergenerator" : "build_comb_powergenerator"
		"build_comb_powergenerator_big" : "build_comb_powergenerator_big"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_combine_jammer.mdl")   = build_comb_regenerationpost :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_regenerationpost" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_regenerationpost" : "build_comb_regenerationpost"
		"overrun_build_comb_regenerationpost" : "overrun_build_comb_regenerationpost"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/combine_generator01.mdl")   = build_comb_shieldgen :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "overrun_build_comb_shieldgen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"overrun_build_comb_shieldgen" : "overrun_build_comb_shieldgen"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/combine_generator01.mdl")   = build_comb_shieldgen_powered :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_shieldgen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_shieldgen" : "build_comb_shieldgen"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/combine/SpecOps.mdl")   = build_comb_specialops :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -210.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_specialops" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_specialops" : "build_comb_specialops"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/combine/pg_synth_factory.mdl")   = build_comb_synthfactory :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 0.000000 64.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_comb_synthfactory" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_comb_synthfactory" : "build_comb_synthfactory"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_turrets/combine_cannon_gun.mdl")   = build_combinecannon :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_combinecannon" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_combinecannon" : "build_combinecannon"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio()   = build_garrisonable :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	destroyable(choices): "destroyable" : 1 : "Can this building be completely destroyed?" = 
	[
		0 : "False"
		1 : "True"
	]
	enteroffset(vector): "enteroffset" : "0.000000 0.000000 0.000000" : "Offset at which units enter the building"
	entertarget(string): "entertarget" : "" : "Target entity at which units enter"
	exitoffset(vector): "exitoffset" : "0.000000 0.000000 0.000000" : "Offset at which units exit the building"
	exittarget(string): "exittarget" : "" : "Target entity at which units exit"
	healthungarrisonable(integer): "healthungarrisonable" : 0 : "Health at which this building is ungarrisonable"
	maxpopulation(integer): "maxpopulation" : 0 : "Maximum number of population in units this building can take."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnGarrisoned(integer) : ""
	output OnUnitKilled(void) : ""
	output OnUnGarrisoned(void) : ""
	playerowned(choices): "playerowned" : 0 : "Do not change the owner of the building to neutral when empty." = 
	[
		0 : "False"
		1 : "True"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "bunker_test" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"bunker_test" : "bunker_test"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = build_neutral_barricade :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/other/pg_old_wall_barrikade.mdl")   = build_neutral_old_wall_barricade :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_neutral_old_wall_barricade" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_neutral_old_wall_barricade" : "build_neutral_old_wall_barricade"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/other/pg_rock_barricade.mdl")   = build_neutral_rock_barricade :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_neutral_rock_barricade" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_neutral_rock_barricade" : "build_neutral_rock_barricade"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/other/pg_wood_fence_barricade.mdl")   = build_neutral_wood_fence :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_neutral_wood_fence" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_neutral_wood_fence" : "build_neutral_wood_fence"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/pg_rebel_barracks.mdl")   = build_reb_barracks :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -210.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_barracks" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_barracks" : "build_reb_barracks"
		"build_reb_barracks_tutorial" : "build_reb_barracks_tutorial"
		"build_reb_barracks_destroyhq" : "build_reb_barracks_destroyhq"
		"sp_valley_build_reb_barracks" : "sp_valley_build_reb_barracks"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/rebels/pg_barrel_trap.mdl")   = build_reb_barreltrap :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_barreltrap" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_barreltrap" : "build_reb_barreltrap"
		"build_reb_barreltrap_destroyhq" : "build_reb_barreltrap_destroyhq"
		"build_reb_char_barreltrap" : "build_reb_char_barreltrap"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/resistance/billet.mdl")   = build_reb_billet :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_billet" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_billet" : "build_reb_billet"
		"build_reb_billet_destroyhq" : "build_reb_billet_destroyhq"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/rebels/pg_rebel_bunker.mdl")   = build_reb_bunker :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	destroyable(choices): "destroyable" : 1 : "Can this building be completely destroyed?" = 
	[
		0 : "False"
		1 : "True"
	]
	enteroffset(vector): "enteroffset" : "0.000000 0.000000 0.000000" : "Offset at which units enter the building"
	entertarget(string): "entertarget" : "" : "Target entity at which units enter"
	exitoffset(vector): "exitoffset" : "0.000000 0.000000 0.000000" : "Offset at which units exit the building"
	exittarget(string): "exittarget" : "" : "Target entity at which units exit"
	healthungarrisonable(integer): "healthungarrisonable" : 0 : "Health at which this building is ungarrisonable"
	maxpopulation(integer): "maxpopulation" : 8 : "Maximum number of population in units this building can take."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnGarrisoned(integer) : ""
	output OnUnitKilled(void) : ""
	output OnUnGarrisoned(void) : ""
	playerowned(choices): "playerowned" : 0 : "Do not change the owner of the building to neutral when empty." = 
	[
		0 : "False"
		1 : "True"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "bunker_test" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"bunker_test" : "bunker_test"
		"build_reb_bunker" : "build_reb_bunker"
		"build_reb_bunker_destroyhq" : "build_reb_bunker_destroyhq"
		"overrun_build_reb_bunker" : "overrun_build_reb_bunker"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/pg_rebel_radio_tower.mdl")   = build_reb_detectiontower :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_radiotower" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_radiotower" : "build_reb_radiotower"
		"build_reb_detectiontower" : "build_reb_detectiontower"
		"build_reb_detectiontower_destroyhq" : "build_reb_detectiontower_destroyhq"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/pg_rebel_hq.mdl")   = build_reb_hq :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -280.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_hq" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_hq" : "build_reb_hq"
		"build_reb_hq_destroyhq" : "build_reb_hq_destroyhq"
		"build_reb_hq_overrun" : "build_reb_hq_overrun"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/rebels/pg_junkyard.mdl")   = build_reb_junkyard :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -280.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_junkyard" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_junkyard" : "build_reb_junkyard"
		"build_reb_junkyard_destroyhq" : "build_reb_junkyard_destroyhq"
		"build_reb_junkyard_tutorial" : "build_reb_junkyard_tutorial"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/rebels/pg_armory.mdl")   = build_reb_munitiondepot :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -280.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_munitiondepot" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_munitiondepot" : "build_reb_munitiondepot"
		"build_reb_munitiondepot_destroyhq" : "build_reb_munitiondepot_destroyhq"
		"build_reb_munitiondepot_mission" : "build_reb_munitiondepot_mission"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/pg_rebel_radio_tower.mdl")   = build_reb_radiotower :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_radiotower" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_radiotower" : "build_reb_radiotower"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/resistance/shack.mdl")   = build_reb_shack :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "50.000000 -50.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_shack" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_shack" : "build_reb_shack"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/resistance/specops.mdl")   = build_reb_specialops :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -210.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_specialops" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_specialops" : "build_reb_specialops"
		"build_reb_specialops_destroyhq" : "build_reb_specialops_destroyhq"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = build_reb_teleporter :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/resistance/triagecenter.mdl")   = build_reb_triagecenter :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -280.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_triagecenter" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_triagecenter" : "build_reb_triagecenter"
		"build_reb_triagecenter_destroyhq" : "build_reb_triagecenter_destroyhq"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/resistance/vortden.mdl")   = build_reb_vortigauntden :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 -280.000000 32.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_reb_vortigauntden" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_reb_vortigauntden" : "build_reb_vortigauntden"
		"build_reb_vortigauntden_destroyhq" : "build_reb_vortigauntden_destroyhq"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/brush/rebels/outhouse.mdl")   = build_rebel_outhouse :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	destroyable(choices): "destroyable" : 1 : "Can this building be completely destroyed?" = 
	[
		0 : "False"
		1 : "True"
	]
	enteroffset(vector): "enteroffset" : "0.000000 0.000000 0.000000" : "Offset at which units enter the building"
	entertarget(string): "entertarget" : "" : "Target entity at which units enter"
	exitoffset(vector): "exitoffset" : "0.000000 0.000000 0.000000" : "Offset at which units exit the building"
	exittarget(string): "exittarget" : "" : "Target entity at which units exit"
	healthungarrisonable(integer): "healthungarrisonable" : 0 : "Health at which this building is ungarrisonable"
	maxpopulation(integer): "maxpopulation" : 3 : "Maximum number of population in units this building can take."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnGarrisoned(integer) : ""
	output OnUnitKilled(void) : ""
	output OnUnGarrisoned(void) : ""
	playerowned(choices): "playerowned" : 1 : "Do not change the owner of the building to neutral when empty." = 
	[
		0 : "False"
		1 : "True"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "bunker_test" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"bunker_test" : "bunker_test"
		"build_reb_outhouse" : "build_reb_outhouse"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/structures/resistance/aidstation.mdl")   = build_rebelregeneration :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	destroyable(choices): "destroyable" : 1 : "Can this building be completely destroyed?" = 
	[
		0 : "False"
		1 : "True"
	]
	enteroffset(vector): "enteroffset" : "0.000000 0.000000 0.000000" : "Offset at which units enter the building"
	entertarget(string): "entertarget" : "" : "Target entity at which units enter"
	exitoffset(vector): "exitoffset" : "0.000000 0.000000 0.000000" : "Offset at which units exit the building"
	exittarget(string): "exittarget" : "" : "Target entity at which units exit"
	healthungarrisonable(integer): "healthungarrisonable" : 0 : "Health at which this building is ungarrisonable"
	maxpopulation(integer): "maxpopulation" : 8 : "Maximum number of population in units this building can take."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnGarrisoned(integer) : ""
	output OnUnitKilled(void) : ""
	output OnUnGarrisoned(void) : ""
	playerowned(choices): "playerowned" : 1 : "Do not change the owner of the building to neutral when empty." = 
	[
		0 : "False"
		1 : "True"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "bunker_test" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"bunker_test" : "bunker_test"
		"build_reb_aidstation" : "build_reb_aidstation"
		"build_reb_aidstation_destroyhq" : "build_reb_aidstation_destroyhq"
		"overrun_build_reb_aidstation" : "overrun_build_reb_aidstation"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_wasteland/medbridge_post01.mdl")   = build_spitturret :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_spitturret" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_spitturret" : "build_spitturret"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/pg_toilet_hut.mdl")   = build_sw_beacon :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 0.000000 0.000000" : "Build target offset for units relative to building"
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "build_sw_beacon" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"build_sw_beacon" : "build_sw_beacon"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = c4explosive :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_obj/pg_flagpole.mdl")   = capturetheflag_point :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	CaptureTime(float): "CaptureTime" : "15.0" : ""
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnCaptured_Player8(void) : ""
	output OnCaptured_Player9(void) : ""
	output OnCaptured_Player10(void) : ""
	output OnCaptured_Player11(void) : ""
	output OnCaptured_Player0(void) : ""
	output OnCaptured_Player1(void) : ""
	output OnCaptured_Player2(void) : ""
	output OnCaptured_Player3(void) : ""
	output OnCaptured_Player4(void) : ""
	output OnCaptured_Player5(void) : ""
	output OnCaptured_Player6(void) : ""
	output OnCaptured_Player7(void) : ""
	output OnCapturedAll(void) : ""
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnFortified(integer) : ""
	output OnUnitKilled(void) : ""
	output OnLost_Player8(void) : ""
	output OnLost_Player9(void) : ""
	output OnLost_Player10(void) : ""
	output OnLost_Player11(void) : ""
	output OnLost_Player0(void) : ""
	output OnLost_Player1(void) : ""
	output OnLost_Player2(void) : ""
	output OnLost_Player3(void) : ""
	output OnLost_Player4(void) : ""
	output OnLost_Player5(void) : ""
	output OnLost_Player6(void) : ""
	output OnLost_Player7(void) : ""
	output OnLostAll(void) : ""
	output OnStartFortifying(integer) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_soldier.mdl")   = char_combine_canshootmove :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_combine_elite" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_combine_elite" : "unit_combine_elite"
		"overrun_unit_combine_elite" : "overrun_unit_combine_elite"
		"char_combine_soldier" : "char_combine_soldier"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = char_rebel_flamer :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_scout" : "unit_rebel_scout"
		"unit_rebel_saboteur" : "unit_rebel_saboteur"
		"unit_rebel_rpg" : "unit_rebel_rpg"
		"unit_rebel_flamer" : "unit_rebel_flamer"
		"overrun_unit_rebel_flamer" : "overrun_unit_rebel_flamer"
		"overrun_unit_rebel_rpg" : "overrun_unit_rebel_rpg"
		"mission_unit_rebel_saboteur" : "mission_unit_rebel_saboteur"
		"mission_unit_rebel_flamer" : "mission_unit_rebel_flamer"
		"mission_unit_rebel_scout" : "mission_unit_rebel_scout"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group03m/male_01.mdl")   = char_rebel_medic :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_scout" : "unit_rebel_scout"
		"unit_rebel_saboteur" : "unit_rebel_saboteur"
		"unit_rebel_rpg" : "unit_rebel_rpg"
		"unit_rebel_flamer" : "unit_rebel_flamer"
		"overrun_unit_rebel_flamer" : "overrun_unit_rebel_flamer"
		"overrun_unit_rebel_rpg" : "overrun_unit_rebel_rpg"
		"mission_unit_rebel_saboteur" : "mission_unit_rebel_saboteur"
		"mission_unit_rebel_flamer" : "mission_unit_rebel_flamer"
		"mission_unit_rebel_scout" : "mission_unit_rebel_scout"
		"char_rebel_medic" : "char_rebel_medic"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group03/male_01.mdl")   = char_rebel_soldier :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"char_rebel_soldier" : "char_rebel_soldier"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = character_unit :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_combine_elite" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_combine_elite" : "unit_combine_elite"
		"overrun_unit_combine_elite" : "overrun_unit_combine_elite"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/bunker_gun01.mdl")   = comb_mountableturret :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "comb_mountableturret" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"comb_mountableturret" : "comb_mountableturret"
		"overrun_comb_mountableturret" : "overrun_comb_mountableturret"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@SolidClass base(Targetname,Parentname,Origin,RenderFields,Global,Inputfilter,EnableDisable,Shadow,Wars)   = comb_shield :
	"" 
[
]


@NPCClass base(BaseUnit)   = combine_bouncemine :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "combine_mine" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"combine_mine" : "combine_mine"
		"overrun_combine_mine" : "overrun_combine_mine"
		"destroyhq_rebel_mine" : "destroyhq_rebel_mine"
		"char_combine_mine" : "char_combine_mine"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/combine_mine01.mdl")   = combine_mine :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "combine_mine" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"combine_mine" : "combine_mine"
		"overrun_combine_mine" : "overrun_combine_mine"
		"destroyhq_rebel_mine" : "destroyhq_rebel_mine"
		"char_combine_mine" : "char_combine_mine"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/combine_mine01.mdl")   = combine_mine_cloaked :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "combine_mine_cloaked" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"combine_mine_cloaked" : "combine_mine_cloaked"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_obj/pg_flagpole.mdl")   = control_point :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	CaptureTime(float): "CaptureTime" : "15.0" : ""
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnCaptured_Player8(void) : ""
	output OnCaptured_Player9(void) : ""
	output OnCaptured_Player10(void) : ""
	output OnCaptured_Player11(void) : ""
	output OnCaptured_Player0(void) : ""
	output OnCaptured_Player1(void) : ""
	output OnCaptured_Player2(void) : ""
	output OnCaptured_Player3(void) : ""
	output OnCaptured_Player4(void) : ""
	output OnCaptured_Player5(void) : ""
	output OnCaptured_Player6(void) : ""
	output OnCaptured_Player7(void) : ""
	output OnCapturedAll(void) : ""
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnFortified(integer) : ""
	output OnUnitKilled(void) : ""
	output OnLost_Player8(void) : ""
	output OnLost_Player9(void) : ""
	output OnLost_Player10(void) : ""
	output OnLost_Player11(void) : ""
	output OnLost_Player0(void) : ""
	output OnLost_Player1(void) : ""
	output OnLost_Player2(void) : ""
	output OnLost_Player3(void) : ""
	output OnLost_Player4(void) : ""
	output OnLost_Player5(void) : ""
	output OnLost_Player6(void) : ""
	output OnLost_Player7(void) : ""
	output OnLostAll(void) : ""
	output OnStartFortifying(integer) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "control_point_char" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"control_point_char" : "control_point_char"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_obj/pg_wars_item_box01.mdl")   = crate :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "crate" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"crate" : "crate"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(prop_dynamic_base,Wars)   = crossbow_bolt :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = crossbow_explosivebolt :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = dangerousball :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = editor_player :
	"" 
[
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/logic_script.vmt")   = event_building_listener :
	"" 
[
	output OnBuildingFinished(string) : ""
	output OnBuildingStarted(string) : ""
]


@FilterClass base(BaseFilter,Wars,Targetname) iconsprite("editor/filter_name.vmt")   = filter_item :
	"" 
[
	mustbecarried(choices): "Must be carried" : 0 : "Item must be carried by the unit (i.e. not on the floor)" = 
	[
		0 : "False"
		1 : "True"
	]
	target(target_source): "Filter Item" : "" : "Name of item to filter on."
]


@FilterClass base(BaseFilter,Wars) iconsprite("editor/filter_name.vmt")   = filter_owner :
	"" 
[
]


@FilterClass base(BaseFilter,Wars) iconsprite("editor/filter_name.vmt")   = filter_unittype :
	"" 
[
	unittype(string): "Unit Type" : "" : "Unit Type"
]


@PointClass base(prop_dynamic_base,Wars)   = flamer_projectile :
	"" 
[
]


@NPCClass base(BaseUnit) studio("models/combine_turrets/floor_turret.mdl")   = floor_turret :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "floor_turret" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"floor_turret" : "floor_turret"
		"char_floor_turret" : "char_floor_turret"
		"overrun_floor_turret" : "overrun_floor_turret"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@SolidClass base(Targetname,Origin,Wars,Parentname,RenderFields,Global,Inputfilter,EnableDisable,Shadow)   = func_brush_building :
	"" 
[
	health(integer): "Health" : 0 : "Health of unit"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@SolidClass base(Targetname,Origin,Wars,Parentname,RenderFields,Global,Inputfilter,EnableDisable,Shadow)   = func_brush_factory :
	"" 
[
	buildangle(angle): "buildangle" : "0.000000 0.000000 0.000000" : ""
	buildtarget(vector): "buildtarget" : "0.000000 0.000000 0.000000" : "Build target offset for units relative to building"
	health(integer): "Health" : 0 : "Health of unit"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	rallypoint(vector): "rallypoint" : "nan nan nan" : ""
	rallypointname(string): "rallypointname" : "" : ""
	spawnpointname(string): "spawnpointname" : "" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@SolidClass base(Targetname,Origin,Wars,Parentname,RenderFields,Global,Inputfilter,EnableDisable,Shadow)   = func_brush_garrisonable :
	"" 
[
	destroyable(choices): "destroyable" : 1 : "Can this building be completely destroyed?" = 
	[
		0 : "False"
		1 : "True"
	]
	enteroffset(vector): "enteroffset" : "0.000000 0.000000 0.000000" : "Offset at which units enter the building"
	entertarget(string): "entertarget" : "" : "Target entity at which units enter"
	exitoffset(vector): "exitoffset" : "0.000000 0.000000 0.000000" : "Offset at which units exit the building"
	exittarget(string): "exittarget" : "" : "Target entity at which units exit"
	health(integer): "Health" : 0 : "Health of unit"
	healthungarrisonable(integer): "healthungarrisonable" : 0 : "Health at which this building is ungarrisonable"
	maxpopulation(integer): "maxpopulation" : 0 : "Maximum number of population in units this building can take."
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnGarrisoned(integer) : ""
	output OnUnitKilled(void) : ""
	output OnUnGarrisoned(void) : ""
	playerowned(choices): "playerowned" : 0 : "Do not change the owner of the building to neutral when empty." = 
	[
		0 : "False"
		1 : "True"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "func_garrisonable" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"func_garrisonable" : "func_garrisonable"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@SolidClass base(Targetname,Parentname,Origin,RenderFields,Global,Inputfilter,EnableDisable,Shadow,Wars)   = func_map_boundary :
	"" 
[bloat(float) : "Bloat" : "-32.0" : "Shrinks the bounds of brush by this amount. Set this to the thickness you used."
]


@SolidClass base(Targetname,Parentname,Origin,RenderFields,Global,Inputfilter,EnableDisable,Shadow,Wars)   = func_nav_blocker :
	"" 
[
	StartDisabled(choices): "Start Disabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	input BlockNav(void) : "Blocks the intersecting navigation areas"
	input UnblockNav(void) : "Unblocks the intersecting navigation areas"
]


@PointClass base(Targetname,Wars) iconsprite("editor/give_resources.vmt")   = give_resources :
	"" 
[
	resourcetype(string): "Resource Type" : "requisition" : "Resource Type"
	takeresources(choices): "Take Resources" : 0 : "Take resources away from the player" = 
	[
		0 : "False"
		1 : "True"
	]
	input GiveResources(integer) : "Give resources to a player."
]


@PointClass base(prop_dynamic_base,Wars)   = grenade_frag :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = grenade_helicopter :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = grenade_smoke :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = grenade_spit :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = grenade_stun :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = hunter_flechette :
	"" 
[
]


@PointClass base(Targetname,Origin,Wars)   = info_npc_spawn_destination :
	"" 
[
	output OnSpawnNPC(target_destination) : ""
	RenameNPC(string): "RenameNPC" : "" : ""
	ReuseDelay(float): "ReuseDelay" : "0.0" : ""
]


@PointClass base(PlayerClass,Angles,Wars) studio("models/editor/playerstart.mdl")   = info_player_wars :
	"" 
[
]


@PointClass base(Targetname,Parentname,Angles,Wars) iconsprite("editor/info_start_wars.vmt")   = info_start_wars :
	"" 
[
	groupname(choices) : "Group Hint" : "" : "Hint for gamelobby for automatically assigning positions to players." =
	[
		"" : "None"
		"Team 1" : "Team 1"
		"Team 2" : "Team 2"
		"Team 3" : "Team 3"
		"Team 4" : "Team 4"
	]
	rallypointname(string): "Rallypoint" : "" : "Optional rally point name, passed to the start building"
	spawnflags(flags) = 
	[
		1 : "Do not populate startspot" : 0
	]
]


@PointClass base(prop_dynamic_base,Wars)   = metropolice_shield :
	"" 
[
]


@NPCClass base(BaseUnit)   = mission_unit_rebel_engineer :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(prop_dynamic_base,Wars)   = molotov :
	"" 
[
]


@PointClass base(Targetname,Origin,Wars) iconsprite("editor/unit_maker.vmt")   = npc_maker :
	"" 
[
	NPCTargetname(string): "NPCTargetname" : "" : ""
	StartDisabled(choices): "StartDisabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	NPCHintGroup(string): "NPCHintGroup" : "" : ""
	IgnoreEntity(string): "IgnoreEntity" : "" : ""
	MaxLiveChildren(integer): "MaxLiveChildren" : 0 : ""
	MaxNPCCount(integer): "MaxNPCCount" : 0 : ""
	NPCType(string): "NPCType" : "" : ""
	output OnAllLiveChildrenDead(void) : ""
	output OnAllSpawned(void) : ""
	output OnAllSpawnedDead(void) : ""
	output OnSpawnNPC(target_destination) : ""
	Relationship(string): "Relationship" : "" : ""
	additionalequipment(string): "additionalequipment" : "" : ""
	spawnflags(flags) = 
	[
		1 : "SF_NPCMAKER_START_ON" : 0
		8 : "SF_NPCMAKER_NPCCLIP" : 0
		16 : "Fade Corpse" : 0
		32 : "Infinite Children" : 0
		64 : "Do Not Drop" : 0
		128 : "Don't Spawn While Visible" : 0
		256 : "SF_NPCMAKER_ALWAYSUSERADIUS" : 0
		512 : "SF_NPCMAKER_NOPRELOADMODELS" : 0
	]
	SpawnFrequency(integer): "SpawnFrequency" : 0 : ""
	NPCSquadName(string): "NPCSquadName" : "" : ""
	input AddMaxChildren(integer) : ""
	input Disable(void) : ""
	input Enable(void) : ""
	input SetMaxChildren(integer) : ""
	input SetMaxLiveChildren(integer) : ""
	input SetSpawnFrequency(float) : ""
	input Spawn(void) : ""
	input Toggle(void) : ""
]


@PointClass base(prop_dynamic_base,Wars)   = nuke :
	"" 
[
]


@PointClass base(Targetname,Origin,Wars)   = overrun_distribution :
	"" 
[
	input AddEntry(void) : ""
]


@PointClass base(Targetname,Origin,Wars)   = overrun_distribution_entry :
	"" 
[
	unittype(string): "unittype" : "" : ""
	weight(float): "weight" : "0.0" : ""
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/overrun_headcrabcannister_spawnpoint.vmt")   = overrun_headcrabcannister_spawnpoint :
	"" 
[
	StartDisabled(choices): "StartDisabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	MaxRadius(float): "MaxRadius" : "1024" : ""
	input Disable(void) : ""
	input Enable(void) : ""
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/overrun_manager.vmt")   = overrun_manager :
	"" 
[
	InDoor(choices): "InDoor" : 0 : "Determines if this map is indoor" = 
	[
		0 : "False"
		1 : "True"
	]
	output OnAntlions(void) : ""
	output OnCombine(void) : ""
	output OnEasy(void) : ""
	output OnHard(void) : ""
	output OnNewWave(integer) : ""
	output OnNormal(void) : ""
	output OnZombies(void) : ""
	spawnflags(flags) = 
	[
		1 : "SF_CUSTOM_CONDITIONS" : 0
	]
	wavetype(string): "wavetype" : "" : ""
	input Failed(void) : ""
	input Victory(void) : ""
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/overrun_wave_spawnpoint.vmt")   = overrun_wave_spawnpoint :
	"" 
[
	StartDisabled(choices): "StartDisabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	MaxRadius(float): "MaxRadius" : "0" : "Max spawn radius. 0 for default."
	Priority(integer): "Priority" : 0 : ""
	input Disable(void) : ""
	input Enable(void) : ""
]


@NPCClass base(BaseUnit)   = passive_regeneration :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_hive/nest_lrg_flat.mdl")   = pheromone_marker :
	"" 
[
	amount(integer): "amount" : 1 : ""
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	frequency(float): "frequency" : "0.1" : ""
	generationtype(choices) : "Generation type" : 2 : "Speed at which new grubs a generated." =
	[
		0 : "Custom"
		1 : "Low"
		2 : "Normal"
		3 : "High"
	]
	maxgrubs(integer): "maxgrubs" : 50 : ""
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	startgrubs(integer): "startgrubs" : 20 : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "pheromone_marker" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"pheromone_marker" : "pheromone_marker"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(prop_dynamic_base,Wars)   = projectile_homing :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = prop_combine_ball :
	"" 
[
	spawnflags(flags) = 
	[
		65536 : "SF_COMBINE_BALL_BOUNCING_IN_SPAWNER" : 0
	]
]


@PointClass base(prop_dynamic_base,Wars)   = prop_dropship_container :
	"" 
[
]


@NPCClass base(BaseUnit) studio("models/props_combine/bunker_gun01.mdl")   = rebels_mountableturret :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 0 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "rebels_mountableturret" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"rebels_mountableturret" : "rebels_mountableturret"
		"destroyhq_reb_mountableturret" : "destroyhq_reb_mountableturret"
		"overrun_reb_mountableturret" : "overrun_reb_mountableturret"
		"char_mountableturret" : "char_mountableturret"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(prop_dynamic_base,Wars)   = rpg_missile :
	"" 
[
]


@NPCClass base(BaseUnit)   = scrap :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/pg_scrap_pile.mdl")   = scrap_marker :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	SpawnConstraint(choices) : "SpawnConstraint" : 0 : "Scrap marker is removed from map if given player does not play. Neutral means it always stays" =
	[
		0 : "Neutral"
		1 : "Enemy"
		2 : "Player_0"
		3 : "Player_1"
		4 : "Player_2"
		5 : "Player_3"
		6 : "Player_4"
		7 : "Player_5"
		8 : "Player_6"
		9 : "Player_7"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "scrap_marker" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"scrap_marker" : "scrap_marker"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/pg_scrap_pile_small.mdl")   = scrap_marker_small :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	SpawnConstraint(choices) : "SpawnConstraint" : 0 : "Scrap marker is removed from map if given player does not play. Neutral means it always stays" =
	[
		0 : "Neutral"
		1 : "Enemy"
		2 : "Player_0"
		3 : "Player_1"
		4 : "Player_2"
		5 : "Player_3"
		6 : "Player_4"
		7 : "Player_5"
		8 : "Player_6"
		9 : "Player_7"
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "scrap_marker_small" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"scrap_marker_small" : "scrap_marker_small"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(prop_dynamic_base,Wars)   = stinkbomb :
	"" 
[
]


@PointClass base(Targetname,Origin,Wars)   = testpythonent :
	"" 
[
]


@SolidClass base(Targetname,Parentname,Origin,RenderFields,Global,Inputfilter,EnableDisable,Shadow,Wars)   = trigger_capture_area :
	"" 
[
	control_point(string): "control_point" : "" : ""
	spawnflags(flags) = 
	[
		1 : "TRIGGER_ALLOW_CLIENTS" : 1
		2 : "TRIGGER_ALLOW_NPCS" : 1
		4 : "TRIGGER_ALLOW_PUSHABLES" : 0
		8 : "TRIGGER_ALLOW_PHYSICS" : 0
		16 : "TRIGGER_ONLY_PLAYER_ALLY_NPCS" : 0
		32 : "TRIGGER_ONLY_CLIENTS_IN_VEHICLES" : 0
		64 : "TRIGGER_ALLOW_ALL" : 0
		512 : "TRIGGER_ONLY_CLIENTS_OUT_OF_VEHICLES" : 0
		128 : "TRIG_PUSH_ONCE" : 0
		256 : "TRIG_PUSH_AFFECT_PLAYER_ON_LADDER" : 0
		1024 : "TRIG_TOUCH_DEBRIS" : 0
		2048 : "TRIGGER_ONLY_NPCS_IN_VEHICLES" : 0
		4096 : "TRIGGER_PUSH_USE_MASS" : 0
	]
]


@PointClass base(Targetname,Origin,Wars)   = trigger_heal_area :
	"" 
[
	StartDisabled(choices): "StartDisabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
]


@PointClass base(Targetname,Origin,Wars)   = trigger_heal_explosion :
	"" 
[
	StartDisabled(choices): "StartDisabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
]


@SolidClass base(Targetname,Parentname,Origin,RenderFields,Global,Inputfilter,EnableDisable,Shadow,Wars)   = trigger_nobuildings :
	"" 
[
]


@NPCClass base(BaseUnit) studio("models/antlion.mdl")   = unit_antlion :
	"" 
[
	burrowed(choices): "burrowed" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	spawnflags(flags) = 
	[
		65536 : "SF_ANTLION_WORKER" : 0
		131072 : "SF_ANTLION_SUICIDER" : 0
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_antlion" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_antlion" : "unit_antlion"
		"unit_antlionworker" : "unit_antlionworker"
		"unit_antlionsuicider" : "unit_antlionsuicider"
		"unit_antlion_small" : "unit_antlion_small"
		"mission_unit_antlionworker" : "mission_unit_antlionworker"
		"mission_unit_antlionsuicider" : "mission_unit_antlionsuicider"
	]
	input Burrow(void) : ""
	input Unburrow(void) : ""
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/antlion_grub.mdl")   = unit_antliongrub :
	"" 
[
	output OnUnitKilled(void) : ""
	spawnflags(flags) = 
	[
		65536 : "SF_ANTLIONGRUB_AUTO_PLACEMENT" : 0
		131072 : "SF_ANTLIONGRUB_ISRESOURCE" : 0
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_antliongrub_resource" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_antliongrub_resource" : "unit_antliongrub_resource"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/antlion_guard.mdl")   = unit_antlionguard :
	"" 
[
	cavernbreed(choices): "cavernbreed" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	spawnflags(flags) = 
	[
		65536 : "SF_ANTLIONGUARD_SERVERSIDE_RAGDOLL" : 0
		131072 : "SF_ANTLIONGUARD_INSIDE_FOOTSTEPS" : 0
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_antlionguard" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_antlionguard" : "unit_antlionguard"
		"unit_antlionguardcavern" : "unit_antlionguardcavern"
		"unit_antlionguardcavernboss" : "unit_antlionguardcavernboss"
		"mission_unit_antlionguard" : "mission_unit_antlionguard"
		"mission_unit_antlionguardcavern" : "mission_unit_antlionguardcavern"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group01/male_01.mdl")   = unit_citizen :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_alyx" : "unit_alyx"
		"unit_barney" : "unit_barney"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/shield_scanner.mdl")   = unit_clawscanner :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_clawscanner" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_clawscanner" : "unit_clawscanner"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_super_soldier.mdl")   = unit_combine :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_combine_elite" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_combine_elite" : "unit_combine_elite"
		"overrun_unit_combine_elite" : "overrun_unit_combine_elite"
		"char_combine_elite" : "char_combine_elite"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_soldier.mdl")   = unit_combine_grenade_upgrade :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_combine" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_combine" : "unit_combine"
		"unit_combine_sg" : "unit_combine_sg"
		"unit_combine_ar2" : "unit_combine_ar2"
		"overrun_unit_combine" : "overrun_unit_combine"
		"overrun_unit_combine_sg" : "overrun_unit_combine_sg"
		"overrun_unit_combine_ar2" : "overrun_unit_combine_ar2"
		"mission_unit_combine" : "mission_unit_combine"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_dropship.mdl")   = unit_combinedropship :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_combinedropship" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_combinedropship" : "unit_combinedropship"
	]
	input Ascend(void) : ""
	input Land(void) : ""
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/gunship.mdl")   = unit_combinegunship :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_combinegunship" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_combinegunship" : "unit_combinegunship"
		"unit_combinehelicopter" : "unit_combinehelicopter"
	]
	input Ascend(void) : ""
	input Land(void) : ""
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_soldier.mdl")   = unit_combinesniper :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_combine_sniper" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_combine_sniper" : "unit_combine_sniper"
		"overrun_unit_combine_sniper" : "overrun_unit_combine_sniper"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_scanner.mdl")   = unit_cscanner :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_scanner" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_scanner" : "unit_scanner"
		"char_scanner" : "char_scanner"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = unit_damage_controller :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = unit_damage_controller_all :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "explosivebolt_damage" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"explosivebolt_damage" : "explosivebolt_damage"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = unit_damage_controller_all_grenade :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "grenade_frag_damage" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"grenade_frag_damage" : "grenade_frag_damage"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/dog_extended.mdl")   = unit_dog :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_dog" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_dog" : "unit_dog"
		"destroyhq_unit_dog" : "destroyhq_unit_dog"
		"overrun_unit_dog" : "overrun_unit_dog"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/pg_props/pg_buildings/other/pg_flagpole_base/pg_flagpole_wood_base_0.mdl")   = unit_dummy :
	"" 
[
	autoconstruct(choices): "Auto Construct" : 1 : "Automatically construct this building without the need of a worker." = 
	[
		0 : "False"
		1 : "True"
	]
	constructed(choices) : "Construction State" : -1 : "Initial state of building" =
	[
		0 : "Pre-Construction"
		1 : "Under Construction"
		2 : "Constructed"
	]
	constructprogress(float): "Construct Progress" : "0.0" : "Construct progress, ranging from 0.0 to 1.0"
	constructtime(float): "Construct Time" : "5.0" : "Time it takes to construct this building."
	output OnConstructed(void) : "Triggered when this building is constructed"
	output OnDestroyed(void) : "Triggered when this building is destroyed"
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "control_point_dummy_0" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"control_point_dummy_0" : "control_point_dummy_0"
		"control_point_reb_lvl1_dummy_0" : "control_point_reb_lvl1_dummy_0"
		"control_point_reb_lvl1_constr_dummy" : "control_point_reb_lvl1_constr_dummy"
		"control_point_reb_lvl2_dummy_0" : "control_point_reb_lvl2_dummy_0"
		"control_point_reb_lvl2_constr_dummy" : "control_point_reb_lvl2_constr_dummy"
		"control_point_comb_lvl1_dummy_0" : "control_point_comb_lvl1_dummy_0"
		"control_point_comb_lvl2_dummy_0" : "control_point_comb_lvl2_dummy_0"
		"control_point_char_dummy_0" : "control_point_char_dummy_0"
		"build_comb_bunker_dummy_0" : "build_comb_bunker_dummy_0"
		"overrun_build_comb_bunker_dummy_0" : "overrun_build_comb_bunker_dummy_0"
		"build_comb_mortar_dummy_0" : "build_comb_mortar_dummy_0"
		"comb_mountableturret_dummy_0" : "comb_mountableturret_dummy_0"
		"overrun_comb_mountableturret_dummy_0" : "overrun_comb_mountableturret_dummy_0"
		"rebels_mountableturret_dummy_0" : "rebels_mountableturret_dummy_0"
		"destroyhq_reb_mountableturret_dummy_0" : "destroyhq_reb_mountableturret_dummy_0"
		"overrun_reb_mountableturret_dummy_0" : "overrun_reb_mountableturret_dummy_0"
		"char_mountableturret_dummy_0" : "char_mountableturret_dummy_0"
		"build_reb_teleporter_dummy_0" : "build_reb_teleporter_dummy_0"
		"build_reb_teleporter_destroyhq_dummy_0" : "build_reb_teleporter_destroyhq_dummy_0"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/zombie/fast.mdl")   = unit_fastzombie :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_fastzombie" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_fastzombie" : "unit_fastzombie"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/headcrabclassic.mdl")   = unit_headcrab :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_headcrab" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_headcrab" : "unit_headcrab"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/headcrab.mdl")   = unit_headcrab_fast :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_headcrab_fast" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_headcrab_fast" : "unit_headcrab_fast"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/headcrabblack.mdl")   = unit_headcrab_poison :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_headcrab_poison" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_headcrab_poison" : "unit_headcrab_poison"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/headcrabblack.mdl")   = unit_headcrab_poison_boss :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_headcrab_poison" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_headcrab_poison" : "unit_headcrab_poison"
		"unit_headcrab_poison_boss" : "unit_headcrab_poison_boss"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/props_combine/headcrabcannister01a.mdl")   = unit_headcrabcanister :
	"" 
[
	Damage(float): "Damage" : "0.0" : ""
	DamageRadius(float): "DamageRadius" : "0.0" : ""
	DetonateDamage(float): "DetonateDamage" : "100.0" : ""
	DetonateDamageRadius(float): "DetonateDamageRadius" : "450.0" : ""
	FlightSpeed(float): "FlightSpeed" : "0.0" : ""
	FlightTime(float): "FlightTime" : "2.0" : ""
	HeadcrabCount(integer): "HeadcrabCount" : 0 : ""
	HeadcrabType(integer): "HeadcrabType" : 0 : ""
	StartingHeight(float): "StartingHeight" : "0.0" : ""
	LaunchPositionName(string): "LaunchPositionName" : "" : ""
	MaxSkyboxRefireTime(float): "MaxSkyboxRefireTime" : "-1.0" : ""
	MinSkyboxRefireTime(float): "MinSkyboxRefireTime" : "-1.0" : ""
	output OnImpacted(void) : ""
	output OnUnitKilled(void) : ""
	output OnLaunched(void) : ""
	output OnOpened(void) : ""
	SkyboxCannisterCount(integer): "SkyboxCannisterCount" : 0 : ""
	SmokeLifetime(float): "SmokeLifetime" : "0.0" : ""
	spawnflags(flags) = 
	[
		1 : "SF_NO_IMPACT_SOUND" : 0
		2 : "SF_NO_LAUNCH_SOUND" : 0
		4096 : "SF_START_IMPACTED" : 0
		8192 : "SF_LAND_AT_INITIAL_POSITION" : 0
		16384 : "SF_WAIT_FOR_INPUT_TO_OPEN" : 0
		32768 : "SF_WAIT_FOR_INPUT_TO_SPAWN_HEADCRABS" : 0
		65536 : "SF_NO_SMOKE" : 0
		131072 : "SF_NO_SHAKE" : 0
		262144 : "SF_REMOVE_ON_IMPACT" : 0
		524288 : "SF_NO_IMPACT_EFFECTS" : 0
	]
	StunChance(float): "StunChance" : "0.33" : ""
	StunDuration(float): "StunDuration" : "5.0" : ""
	StunRadius(float): "StunRadius" : "250.0" : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_headcrabcanister" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_headcrabcanister" : "unit_headcrabcanister"
	]
	FlightTime(float): "FlightTime" : "0.0" : ""
	input FireCanister(void) : ""
	input OpenCanister(void) : ""
	input SpawnHeadcrabs(void) : ""
	input StopSmoke(void) : ""
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/hunter.mdl")   = unit_hunter :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_hunter" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_hunter" : "unit_hunter"
		"overrun_unit_hunter" : "overrun_unit_hunter"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/buggy.mdl")   = unit_jeep :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_jeep" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_jeep" : "unit_jeep"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(Targetname,Origin,Wars) iconsprite("editor/unit_maker.vmt")   = unit_maker :
	"" 
[
	NPCTargetname(string): "NPCTargetname" : "" : ""
	StartDisabled(choices): "StartDisabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	NPCHintGroup(string): "NPCHintGroup" : "" : ""
	IgnoreEntity(string): "IgnoreEntity" : "" : ""
	MaxLiveChildren(integer): "MaxLiveChildren" : 0 : ""
	MaxNPCCount(integer): "MaxNPCCount" : 0 : ""
	NPCType(string): "NPCType" : "" : ""
	output OnAllLiveChildrenDead(void) : ""
	output OnAllSpawned(void) : ""
	output OnAllSpawnedDead(void) : ""
	output OnSpawnNPC(target_destination) : ""
	Relationship(string): "Relationship" : "" : ""
	additionalequipment(string): "additionalequipment" : "" : ""
	spawnflags(flags) = 
	[
		1 : "SF_NPCMAKER_START_ON" : 0
		8 : "SF_NPCMAKER_NPCCLIP" : 0
		16 : "Fade Corpse" : 0
		32 : "Infinite Children" : 0
		64 : "Do Not Drop" : 0
		128 : "Don't Spawn While Visible" : 0
		256 : "SF_NPCMAKER_ALWAYSUSERADIUS" : 0
		512 : "SF_NPCMAKER_NOPRELOADMODELS" : 0
	]
	SpawnFrequency(integer): "SpawnFrequency" : 0 : ""
	NPCSquadName(string): "NPCSquadName" : "" : ""
	input AddMaxChildren(integer) : ""
	input Disable(void) : ""
	input Enable(void) : ""
	input SetMaxChildren(integer) : ""
	input SetMaxLiveChildren(integer) : ""
	input SetSpawnFrequency(float) : ""
	input Spawn(void) : ""
	input Toggle(void) : ""
]


@NPCClass base(BaseUnit) studio("models/manhack.mdl")   = unit_manhack :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	spawnflags(flags) = 
	[
		2 : "SF_NPC_GAG" : 0
		65536 : "SF_MANHACK_PACKED_UP" : 0
		131072 : "SF_MANHACK_NO_DAMAGE_EFFECTS" : 0
		262144 : "SF_MANHACK_USE_AIR_NODES" : 0
		524288 : "SF_MANHACK_CARRIED" : 0
		1048576 : "SF_MANHACK_NO_DANGER_SOUNDS" : 0
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_manhack" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_manhack" : "unit_manhack"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/swarm/marine/marine.mdl")   = unit_marine :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_marine" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_marine" : "unit_marine"
		"unit_marine_flamer" : "unit_marine_flamer"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/police.mdl")   = unit_metropolice :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_metropolice" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_metropolice" : "unit_metropolice"
		"unit_metropolice_smg1" : "unit_metropolice_smg1"
		"unit_metropolice_riot" : "unit_metropolice_riot"
		"overrun_unit_metropolice" : "overrun_unit_metropolice"
		"overrun_unit_metropolice_riot" : "overrun_unit_metropolice_riot"
		"mission_unit_metropolice" : "mission_unit_metropolice"
		"char_metropolice_support" : "char_metropolice_support"
		"char_metropolice_scout" : "char_metropolice_scout"
		"char_metropolice_tank" : "char_metropolice_tank"
		"char_metropolice_tank_smg1" : "char_metropolice_tank_smg1"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/antlion_worker.mdl")   = unit_mutalisk :
	"" 
[
	burrowed(choices): "burrowed" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	spawnflags(flags) = 
	[
		65536 : "SF_ANTLION_WORKER" : 0
		131072 : "SF_ANTLION_SUICIDER" : 0
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_antlion" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_antlion" : "unit_antlion"
		"unit_antlionworker" : "unit_antlionworker"
		"unit_antlionsuicider" : "unit_antlionsuicider"
		"unit_antlion_small" : "unit_antlion_small"
		"mission_unit_antlionworker" : "mission_unit_antlionworker"
		"mission_unit_antlionsuicider" : "mission_unit_antlionsuicider"
		"unit_mutalisk" : "unit_mutalisk"
	]
	input Burrow(void) : ""
	input Unburrow(void) : ""
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_scanner.mdl")   = unit_observer :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_observer" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_observer" : "unit_observer"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Zombie/poison.mdl")   = unit_poisonzombie :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_poisonzombie" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_poisonzombie" : "unit_poisonzombie"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Zombie/poison.mdl")   = unit_poisonzombieboss :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_poisonzombieboss" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_poisonzombieboss" : "unit_poisonzombieboss"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group03/male_01.mdl")   = unit_rebel :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_scout" : "unit_rebel_scout"
		"unit_rebel_saboteur" : "unit_rebel_saboteur"
		"unit_rebel_rpg" : "unit_rebel_rpg"
		"unit_rebel_flamer" : "unit_rebel_flamer"
		"overrun_unit_rebel_flamer" : "overrun_unit_rebel_flamer"
		"overrun_unit_rebel_rpg" : "overrun_unit_rebel_rpg"
		"mission_unit_rebel_saboteur" : "mission_unit_rebel_saboteur"
		"mission_unit_rebel_flamer" : "mission_unit_rebel_flamer"
		"mission_unit_rebel_scout" : "mission_unit_rebel_scout"
		"char_rebel_scout" : "char_rebel_scout"
		"char_rebel_rpg" : "char_rebel_rpg"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group03/male_01.mdl")   = unit_rebel_engineer :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_engineer" : "unit_rebel_engineer"
		"destroyhq_unit_rebel_engineer" : "destroyhq_unit_rebel_engineer"
		"tutorial_rebel_engineer" : "tutorial_rebel_engineer"
		"overrun_unit_rebel_engineer" : "overrun_unit_rebel_engineer"
		"mission_unit_rebel_engineer" : "mission_unit_rebel_engineer"
		"char_rebel_engineer" : "char_rebel_engineer"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group03/male_01.mdl")   = unit_rebel_grenade_upgrade :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel" : "unit_rebel"
		"unit_rebel_destroyhq" : "unit_rebel_destroyhq"
		"tutorial_rebel" : "tutorial_rebel"
		"unit_rebel_sg" : "unit_rebel_sg"
		"unit_rebel_sg_destroyhq" : "unit_rebel_sg_destroyhq"
		"unit_rebel_ar2" : "unit_rebel_ar2"
		"unit_rebel_ar2_destroyhq" : "unit_rebel_ar2_destroyhq"
		"overrun_unit_rebel" : "overrun_unit_rebel"
		"overrun_unit_rebel_sg" : "overrun_unit_rebel_sg"
		"overrun_unit_rebel_ar2" : "overrun_unit_rebel_ar2"
		"mission_unit_rebel" : "mission_unit_rebel"
		"mission_unit_rebel_sg" : "mission_unit_rebel_sg"
		"unit_rebel_test" : "unit_rebel_test"
		"sp_valley_unit_rebel" : "sp_valley_unit_rebel"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group03m/male_01.mdl")   = unit_rebel_medic :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_medic" : "unit_rebel_medic"
		"destroyhq_unit_rebel_medic" : "destroyhq_unit_rebel_medic"
		"overrun_unit_rebel_medic" : "overrun_unit_rebel_medic"
		"mission_unit_rebel_medic" : "mission_unit_rebel_medic"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group01/male_01.mdl")   = unit_rebel_partisan :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_scout" : "unit_rebel_scout"
		"unit_rebel_saboteur" : "unit_rebel_saboteur"
		"unit_rebel_partisan" : "unit_rebel_partisan"
		"unit_rebel_partisan_destroyhq" : "unit_rebel_partisan_destroyhq"
		"overrun_unit_rebel_partisan" : "overrun_unit_rebel_partisan"
		"sp_valley_unit_rebel_partisan" : "sp_valley_unit_rebel_partisan"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group01/male_01.mdl")   = unit_rebel_partisan_molotov :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_scout" : "unit_rebel_scout"
		"unit_rebel_saboteur" : "unit_rebel_saboteur"
		"unit_rebel_partisan_molotov" : "unit_rebel_partisan_molotov"
		"unit_rebel_partisan_molotov_destroyhq" : "unit_rebel_partisan_molotov_destroyhq"
		"overrun_unit_rebel_partisan_molotov" : "overrun_unit_rebel_partisan_molotov"
		"mission_unit_rebel_partisan_molotov" : "mission_unit_rebel_partisan_molotov"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Humans/Group03/male_01.mdl")   = unit_rebel_veteran :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_citizen" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_citizen" : "unit_citizen"
		"unit_bullseye" : "unit_bullseye"
		"unit_combine_citizen" : "unit_combine_citizen"
		"unit_mission_citizen" : "unit_mission_citizen"
		"unit_citizen_barricade" : "unit_citizen_barricade"
		"unit_rebel_veteran" : "unit_rebel_veteran"
		"destroyhq_unit_rebel_veteran" : "destroyhq_unit_rebel_veteran"
		"overrun_unit_rebel_veteran" : "overrun_unit_rebel_veteran"
		"char_rebel_veteran" : "char_rebel_veteran"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Roller.mdl")   = unit_rollermine :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_rollermine" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_rollermine" : "unit_rollermine"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = unit_scan :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_scan" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_scan" : "unit_scan"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/stalker.mdl")   = unit_stalker :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_stalker" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_stalker" : "unit_stalker"
		"overrun_unit_stalker" : "overrun_unit_stalker"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/combine_strider.mdl")   = unit_strider :
	"" 
[
	disablephysics(choices): "disablephysics" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	spawnflags(flags) = 
	[
		65536 : "SF_CAN_STOMP_PLAYER" : 0
		131072 : "SF_TAKE_MINIMAL_DAMAGE_FROM_NPCS" : 0
	]
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_strider" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_strider" : "unit_strider"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit)   = unit_teleporter_rift :
	"" 
[
	output OnUnitKilled(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_teleporter_rift" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_teleporter_rift" : "unit_teleporter_rift"
	]
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/vortigaunt.mdl")   = unit_vortigaunt :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_vortigaunt" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_vortigaunt" : "unit_vortigaunt"
		"overrun_unit_vortigaunt" : "overrun_unit_vortigaunt"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Zombie/classic.mdl")   = unit_zombie :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_zombie" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_zombie" : "unit_zombie"
		"unit_zombieboss" : "unit_zombieboss"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@NPCClass base(BaseUnit) studio("models/Zombie/zombie_soldier.mdl")   = unit_zombine :
	"" 
[
	output OnAllOrdersCanceled(void) : ""
	output OnUnitKilled(void) : ""
	output OnNewOrder(void) : ""
	output OnOrderPerformed(void) : ""
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_zombine" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
		"unit_zombine" : "unit_zombine"
	]
	input CancelAllOrders(void) : "Cancels all orders of the unit"
	input CancelOrder(integer) : "Cancel order at specified index parameter (0 is first active order)"
	input DisableSensing(void) : "Disables unit sensing (i.e. detecting enemies)"
	input EnableSensing(void) : "Enables unit sensing (i.e. detecting enemies)"
	input Order(string) : "Order unit to target entity"
	input OrderUnit(string) : "Order unit to target entity"
	input PlayAnimation(string) : "Plays an animation by activity name"
	input PlayGesture(string) : "Plays a gesture by activity name"
	input QueueOrder(string) : "Queue an order to an unit to a target entity with optional ability specified (e.g. 'targetname:grenade')"
	input Teleport(string) : "Teleports the unit to the target entity"
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(Targetname,Origin,Wars)   = vort_effect_dispel :
	"" 
[
]


@PointClass base(Targetname,Parentname,Angles,Wars) iconsprite("editor/wars_ability_manager.vmt")   = wars_ability_manager :
	"" 
[
	output AbilityCanceled(string) : "Fired when an ability is canceled."
	output AbilityCompleted(string) : "Fired when an ability is completed."
	input HideAbilityOnUnavailabe(string) : "Hides ability from UI if unavailable"
	input LockAbility(string) : "Locks the specified ability for the owner of this entity"
	input MakeAbilityFree(string) : "Makes the target ability free of costs (other requirements might still apply!)"
	input MakeAbilityPaid(string) : "Makes the target ability paid."
	input RemoveRequirements(string) : ""
	input ResearchAbility(string) : "Researches an ability immediately. Note: some abilities may become 'unresearched' again due other events."
	input ResetRequirements(string) : ""
	input ShowAbilityOnUnavailabe(string) : "Shows ability in UI even if unavailable"
	input UnResearchAbility(string) : "Unresearches an ability. Note: some abilities may become 'researched' again due other events."
	input UnlockAbility(string) : "Unlocks the specified ability for the owner of this entity"
]


@PointClass base(Targetname,Origin,Wars) iconsprite("editor/wars_choose_random_order.vmt")   = wars_choose_random_order :
	"" 
[
	output TriggerOutput01(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput01chance(float): "Trigger Output 01 Chance" : "1.0" : "Chance that the unit will be outputted form Output01. (From 0 to 1)"
	output TriggerOutput02(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput02chance(float): "Trigger Output 02 Chance" : "1.0" : "Chance that the unit will be outputted form Output02. (From 0 to 1)"
	output TriggerOutput03(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput03chance(float): "Trigger Output 03 Chance" : "1.0" : "Chance that the unit will be outputted form Output03. (From 0 to 1)"
	output TriggerOutput04(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput04chance(float): "Trigger Output 04 Chance" : "1.0" : "Chance that the unit will be outputted form Output04. (From 0 to 1)"
	output TriggerOutput05(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput05chance(float): "Trigger Output 05 Chance" : "1.0" : "Chance that the unit will be outputted form Output05. (From 0 to 1)"
	output TriggerOutput06(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput06chance(float): "Trigger Output 06 Chance" : "1.0" : "Chance that the unit will be outputted form Output06. (From 0 to 1)"
	output TriggerOutput07(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput07chance(float): "Trigger Output 07 Chance" : "1.0" : "Chance that the unit will be outputted form Output07. (From 0 to 1)"
	output TriggerOutput08(target_destination) : "Fired when randomly chosen. Outputs the unit as argument."
	ontriggeroutput08chance(float): "Trigger Output 08 Chance" : "1.0" : "Chance that the unit will be outputted form Output08. (From 0 to 1)"
	input InputTriggerUnit(target_destination) : "Takes the input unit and outputs it randomly, from one if the outputs."
]


@PointClass base(Targetname,Parentname,Angles) iconsprite("editor/wars_cpu_player.vmt")   = wars_cpu_player :
	"" 
[
	CPUPlayer(choices) : "CPU Player" : 2 : "Target CPU player to be enabled or disabled" =
	[
		0 : "Neutral"
		1 : "Enemy"
		2 : "Player_0"
		3 : "Player_1"
		4 : "Player_2"
		5 : "Player_3"
		6 : "Player_4"
		7 : "Player_5"
		8 : "Player_6"
		9 : "Player_7"
	]
	input DisableCPUPlayer(void) : "Disables the CPU Player"
	input EnableCPUPlayer(void) : "Enables the CPU Player"
]


@NPCClass base(BaseUnit) studio()   = wars_generic_item :
	"" 
[
	afterdroppickupdelay(float): "Pickup Delay" : "0.0" : "Time it takes before the item is pickupable after dropping"
	bonemerge(choices): "Bone Merge" : 1 : "Perform bone merge on unit carrying this item." = 
	[
		0 : "False"
		1 : "True"
	]
	carrymodel(studio): "Carry Model" : "models/pg_props/pg_obj/pg_backpack_scrap.mdl" : "Model used by unit when carrying the item."
	enableforpickup(choices): "Enabled" : 1 : "Whether this item can be picked up by an unit." = 
	[
		0 : "False"
		1 : "True"
	]
	output OnDrop(integer) : ""
	output OnUnitKilled(void) : ""
	output OnPickUp(integer) : ""
	pickupfilter(filterclass): "Pickup Filter" : "" : "Filter entity name for restricting pickup by units (e.g. enemies)"
	resettime(float): "Reset Time" : "0.0" : "Time after which the item is reset to the start position when not carried"
	Uncontrollable(choices): "Uncontrollable" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	unittype(choices) : "Unit Type" : "unit_unknown" : "Unit Type" =
	[
		"unit_unknown" : "unit_unknown"
	]
	input EnableForPickup(void) : "Enable for pickup"
	input EnableForPickup(void) : "Enable for pickup"
	input Kill(void) : "Kill item entity"
	input ResetPosition(void) : "Resets position of item now."
	input SetPickupFilter(string) : "Sets/changes the pickup filter entity"
	input SetResetPosition(string) : "Updates the reset position. Pass the name of the target reset position or leave empty for using the current item position."
	input SetResetTime(integer) : "Sets the reset time. Below 1 is considered no reset to start position."
	input MakeControllable(void) : "Make the unit controllable again"
	input MakeImmortal(void) : "Make the unit immortal"
	input MakeMortal(void) : "Make the unit mortal"
	input MakeUncontrollable(void) : "Make the unit uncontrollable"
]


@PointClass base(Targetname,Origin,Wars) iconsprite("editor/wars_give_order.vmt")   = wars_give_order :
	"" 
[
	abilityname(string): "Ability" : "" : "Optional target type ability to be executed by the unit"
	interceptcancelminrange(float): "Intercept Cancel Min Range" : "0" : "Minimal range for intercept cancel"
	output OnOrderInterrupted(void) : "Outputs when the order has been interrupted. By Input CancelOrder, Keyvalue 'Intercept cancel' or when all units are dead."
	output OnOrderPerformed(target_destination) : "Fired when a unit performed the order. Outputs the unit as argument."
	output OnOrderPerformedall(void) : "Fired when a ALL units performed the order. It also fires the output when some units die on the way."
	overwriteexistingorders(choices): "Overwrite Existing Orders" : 1 : "Overwrite existing orders that are performed on the unit right now by other wars_give_order entities." = 
	[
		0 : "False"
		1 : "True"
	]
	spawnflags(flags) = 
	[
		1 : "Intercept Cancel" : 0
	]
	targetordername(target_destination): "Order Target" : "" : "Optional target entity for order"
	unitname(target_source): "Unit Target Name" : "" : "Target name of units on which this should be performed"
	input CancelOrder(void) : "Stops all units performing the order"
	input PerformOrder(void) : "Perform the setup order. It performs the order on all the units with the defined name in keyvalue 'Unit name<String>'."
	input PerformOrderUnit(target_destination) : "Perform the order on the input unit. It ignores the keyvalue 'Unit name<String>' and performs the order on the input unit only."
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/wars_messagebox.vmt")   = wars_messagebox :
	"" 
[
	Text(string): "Text" : "" : "Text displayed in the messagebox."
	locked(choices): "Lock Continue" : 0 : "Should the continue button be locked?" = 
	[
		0 : "False"
		1 : "True"
	]
	output OnPressContinue(void) : ""
	output OnDisplayed(void) : ""
	output OnForcedContinue(void) : ""
	SmoothClose(choices): "Smooth Close" : 0 : "Should the MS Box play a close animation?" = 
	[
		0 : "False"
		1 : "True"
	]
	input Close(void) : "Close Messagebox"
	input Display(void) : "Display Messagebox"
	input LockContinue(void) : "Lock the continue Button"
	input UnlockContinue(void) : "Unlock the continue Button"
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/wars_mission_objective.vmt")   = wars_mission_objective :
	"" 
[
	description(string): "Description" : "" : "Description displayed in hud"
	output OnCompleted(void) : ""
	output OnFailed(void) : ""
	priority(integer): "Priority" : 0 : "Priority used for sorting"
	visible(choices): "Visible" : 0 : "Determines if the objective is visible" = 
	[
		0 : "False"
		1 : "True"
	]
	input SetCompleted(void) : "Makes the objective completed and fires the completed output"
	input SetFailed(void) : "Makes the objective failed and fires the failed output"
	input SetInProgress(void) : "Makes the objective in progress (if not already)"
	input SetPriority(void) : "Changes the priority of the objective (ranking displayed to Player)"
	input SetVisible(bool) : "Make objective visible"
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/wars_mission_timer.vmt")   = wars_mission_timer :
	"" 
[
	description(string): "Description" : "" : "Description displayed in hud"
	output OnCompleted(void) : ""
	output OnFailed(void) : ""
	output OnThresholdRemaining(void) : ""
	output OnTimedOut(void) : ""
	ontimeoutdo(choices) : "On Timeout Do" : 0 : "Defines behavior on timeout, in addition to firing the timeout event." =
	[
		0 : "Nothing"
		1 : "Complete"
		2 : "Fail"
	]
	priority(integer): "Priority" : 0 : "Priority used for sorting"
	timerthreshold(float): "Timer Threshold" : "10" : "Threshold time at which OnThresholdRemaining is fired."
	Timer(float): "Timer" : "0" : ""
	visible(choices): "Visible" : 0 : "Determines if the objective is visible" = 
	[
		0 : "False"
		1 : "True"
	]
	input AddTime(float) : "Adds time to the existing time"
	input Pause(void) : "Pauzes the timer"
	input RemoveTime(float) : "Removes time from the existing time"
	input Reset(void) : "Resets the timer"
	input SetTime(float) : "Sets timer to a new time"
	input Start(void) : "Starts the timer"
	input SetCompleted(void) : "Makes the objective completed and fires the completed output"
	input SetFailed(void) : "Makes the objective failed and fires the failed output"
	input SetInProgress(void) : "Makes the objective in progress (if not already)"
	input SetPriority(void) : "Changes the priority of the objective (ranking displayed to Player)"
	input SetVisible(bool) : "Make objective visible"
]


@PointClass base(Targetname,Parentname,Angles,Wars) iconsprite("editor/wars_music_controller.vmt")   = wars_music_controller :
	"" 
[
	customtrack(string): "Custom Track" : "" : "Path to custom track"
	musicenabled(choices): "Music Enabled" : 1 : "Whether music is enabled or disabled" = 
	[
		0 : "False"
		1 : "True"
	]
	output MusicStopped(void) : ""
	input PlayCustom(string) : "Starts playing a custom track"
	input PlayDefault(void) : "Starts playing default tracks again"
	input StopMusic(void) : "Stops any music from being played"
]


@PointClass base(Targetname,Origin,Wars) iconsprite("editor/wars_player_follow_entity.vmt")   = wars_player_follow_entity :
	"" 
[
	allplayers(choices): "All Players" : 0 : "Force all players to follow the entity." = 
	[
		0 : "False"
		1 : "True"
	]
	enabled(choices): "Enabled" : 1 : "Is this entity enabled?" = 
	[
		0 : "False"
		1 : "True"
	]
	forced(choices): "Forced" : 1 : "Force the entity to be followed by the player. The player will not be able to stop following unless stopped with the forced parameter." = 
	[
		0 : "False"
		1 : "True"
	]
	spawnflags(flags) = 
	[
		1 : "Freeze Player" : 1
	]
	triggeronce(choices): "Trigger Once" : 0 : "Allow triggering this follow entity once" = 
	[
		0 : "False"
		1 : "True"
	]
	input CamFollowEntity(string) : ""
	input CamReleaseFollowEntity(void) : ""
]


@PointClass base(Targetname,Parentname,Angles) iconsprite("editor/wars_player_relation.vmt")   = wars_player_relation :
	"" 
[
	Disposition(choices) : "Disposition" : 3 : "Relation to be applied." =
	[
		1 : "Hate"
		2 : "Fear"
		3 : "Like"
		4 : "Neutral"
	]
	reciprocal(choices): "Reciprocal" : 0 : "Applies the relation to both sides (not just to the subject" = 
	[
		0 : "False"
		1 : "True"
	]
	subjectplayer(choices) : "Player Subject" : 2 : "Subject to which the relation is applied" =
	[
		0 : "Neutral"
		1 : "Enemy"
		2 : "Player_0"
		3 : "Player_1"
		4 : "Player_2"
		5 : "Player_3"
		6 : "Player_4"
		7 : "Player_5"
		8 : "Player_6"
		9 : "Player_7"
	]
	targetplayer(choices) : "Player Target" : 2 : "Target of the applied relation" =
	[
		0 : "Neutral"
		1 : "Enemy"
		2 : "Player_0"
		3 : "Player_1"
		4 : "Player_2"
		5 : "Player_3"
		6 : "Player_4"
		7 : "Player_5"
		8 : "Player_6"
		9 : "Player_7"
	]
	input ApplyRelation(void) : ""
]


@PointClass base(Targetname,Parentname,Angles) iconsprite("editor/wars_player_setup.vmt")   = wars_player_setup :
	"" 
[
	Color(string): "Color" : "200 120 20 255" : "Color to be applied, space separated rgba"
	Faction(choices) : "Faction" : "rebels" : "Faction to be applied." =
	[
		"rebels" : "Rebels"
		"combine" : "Combine"
	]
	player(choices) : "Player" : 2 : "Target of the setup" =
	[
		0 : "Neutral"
		1 : "Enemy"
		2 : "Player_0"
		3 : "Player_1"
		4 : "Player_2"
		5 : "Player_3"
		6 : "Player_4"
		7 : "Player_5"
		8 : "Player_6"
		9 : "Player_7"
	]
	spawnflags(flags) = 
	[
		1 : "Apply at start" : 0
	]
	input ApplyAll(void) : "Apply both faction and color setting."
	input ApplyFaction(void) : "Apply the faction setting."
]


@PointClass base(Targetname,Parentname,Angles,Wars) iconsprite("editor/wars_population_listener.vmt")   = wars_population_listener :
	"" 
[
	StartDisabled(choices): "Start Disabled" : 0 : "" = 
	[
		0 : "False"
		1 : "True"
	]
	output OnBuildingCountChanged(float) : ""
	output OnPopulationChanged(float) : ""
	input Disable(void) : ""
	input Enable(void) : ""
]


@PointClass base(Targetname,Origin,Wars) iconsprite("editor/wars_sp_difficulty.vmt")   = wars_sp_difficulty :
	"" 
[
	Defaultdifficulty(choices) : "Default Difficulty" : "Normal" : "Default Difficulty (Easy,Normal or Hard). Used if the difficulty setting was not found." =
	[
		"Normal" : "Normal"
		"Easy" : "Easy"
		"Hard" : "Hard"
	]
	output OnSpawn(void) : ""
	output OnSpawnEasy(void) : ""
	output OnSpawnHard(void) : ""
	output OnSpawnNormal(void) : ""
	output OnTrigger(void) : ""
	output OnTriggerEasy(void) : ""
	output OnTriggerHard(void) : ""
	output OnTriggerNormal(void) : ""
	input Trigger(void) : "Trigger the entity"
]


@PointClass base(prop_dynamic_base,Wars)   = wars_weapon_flamer :
	"" 
[
]


@PointClass base(Targetname,Parentname,Angles,EnableDisable) iconsprite("editor/wars_win_condition.vmt")   = wars_win_condition :
	"" 
[
	output OnFailed(void) : ""
	output OnCompleted(void) : ""
	input PlayerLost(void) : "Player lost"
	input PlayerVictory(void) : "Player victory"
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_ar2 :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_crossbow :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_hammer :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_pistol :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_rpg :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_shotgun :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_smg1 :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_smg1_sw :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_sniperrifle :
	"" 
[
]


@PointClass base(prop_dynamic_base,Wars)   = weapon_stunstick :
	"" 
[
]


